'use strict';
const initialQuestions = {
    poranek: [ {id:"m1", text:"Za co jestem dziÅ› wdziÄ™czny/a?"}, {id:"m2", text:"Jaki jest mÃ³j najwaÅ¼niejszy cel na dzisiaj?"}],
    wieczor: [ {id:"e1", text:"Trzy dobre rzeczy, ktÃ³re siÄ™ dzisiaj wydarzyÅ‚y, toâ€¦"}, {id:"e2", text:"Czego nowego siÄ™ dzisiaj nauczyÅ‚em/am?"}]
};
const initialHabits = ["Medytacja", "Ä†wiczenia fizyczne", "Czytanie ksiÄ…Å¼ki", "Nauka czegoÅ› nowego"];
const initialSentimentQuestions = [ { id: 'health', question: 'ðŸ’ª Jak oceniasz swoje samopoczucie fizyczne?' }, { id: 'mood', question: 'ðŸ˜Š Jak oceniam swÃ³j nastrÃ³j?' }, { id: 'productivity', question: 'ðŸš€ Jak oceniam swojÄ… produktywnoÅ›Ä‡?' }];
const quotes = [ "Nawet najdalszÄ… podrÃ³Å¼ zaczyna siÄ™ od pierwszego kroku. ðŸŒ±", "BÄ…dÅº zmianÄ…, ktÃ³rÄ… pragniesz ujrzeÄ‡ w Å›wiecie. ðŸš€", "Jedynym sposobem na wielkÄ… pracÄ™ jest kochanie tego, co robisz. âœ¨", "KaÅ¼dy dzieÅ„ to nowa szansa, aby staÄ‡ siÄ™ lepszÄ… wersjÄ… siebie.", "MaÅ‚e kroki w dobrym kierunku mogÄ… okazaÄ‡ siÄ™ najwiÄ™kszym krokiem w Twoim Å¼yciu.", "Tajemnica postÄ™pu polega na tym, by zaczÄ…Ä‡.", "Nie licz dni, spraw, by dni siÄ™ liczyÅ‚y.", "Sukces to suma maÅ‚ych wysiÅ‚kÃ³w, powtarzanych dzieÅ„ po dniu.", "Wzrost i komfort nie mogÄ… wspÃ³Å‚istnieÄ‡.", "Dyscyplina to most miÄ™dzy celami a osiÄ…gniÄ™ciami.", "UmysÅ‚ jest wszystkim. Stajesz siÄ™ tym, o czym myÅ›lisz.", "JesteÅ› silniejszy, niÅ¼ myÅ›lisz. Bardziej zdolny, niÅ¼ sobie wyobraÅ¼asz.", "Zacznij tam, gdzie jesteÅ›. UÅ¼yj tego, co masz. ZrÃ³b, co moÅ¼esz.", "CierpliwoÅ›Ä‡, wytrwaÅ‚oÅ›Ä‡ i pot tworzÄ… niezwyciÄ™Å¼onÄ… kombinacjÄ™ sukcesu.", "Nigdy nie jest za pÃ³Åºno, by byÄ‡ tym, kim mogÅ‚eÅ› byÄ‡.", "W samym Å›rodku trudnoÅ›ci kryjÄ… siÄ™ moÅ¼liwoÅ›ci.", "Charakteru nie moÅ¼na rozwinÄ…Ä‡ w spokoju i ciszy. Tylko przez doÅ›wiadczenie prÃ³b i cierpienia moÅ¼na wzmocniÄ‡ duszÄ™.", "Natura nie spieszy siÄ™, a jednak wszystko jest osiÄ…gniÄ™te.", "SpÃ³jrz gÅ‚Ä™boko w naturÄ™, a wtedy wszystko zrozumiesz lepiej.", "Najlepszy czas na zasadzenie drzewa byÅ‚ 20 lat temu. Drugi najlepszy czas jest teraz."];
const suggestedMorningQuestions = ["Jaka jedna rzecz sprawiÅ‚aby, Å¼e ten dzieÅ„ bÄ™dzie wspaniaÅ‚y?", "Jak mogÄ™ dzisiaj zadbaÄ‡ o swoje ciaÅ‚o i umysÅ‚?", "Z jakim nastawieniem chcÄ™ rozpoczÄ…Ä‡ ten dzieÅ„?", "Czego chcÄ™ siÄ™ dziÅ› nauczyÄ‡?", "Kto potrzebuje dzisiaj mojej dobroci?", "JakÄ… maÅ‚Ä… przyjemnoÅ›Ä‡ mogÄ™ sobie dziÅ› sprawiÄ‡?", "Jaki jest pierwszy krok w kierunku mojego duÅ¼ego celu?", "Jak mogÄ™ wyjÅ›Ä‡ ze swojej strefy komfortu?", "Czego nie mogÄ™ siÄ™ doczekaÄ‡ w dzisiejszym dniu?", "JakÄ… pozytywnÄ… energiÄ™ wnoszÄ™ do Å›wiata?", "Za jakÄ… trudnÄ… lekcjÄ™ z przeszÅ‚oÅ›ci jestem wdziÄ™czny?", "Jak mogÄ™ dziÅ› okazaÄ‡ miÅ‚oÅ›Ä‡ bliskiej osobie?", "Jaki problem mogÄ™ dziÅ› sprÃ³bowaÄ‡ rozwiÄ…zaÄ‡?", "Co mogÄ™ zrobiÄ‡, aby poczuÄ‡ siÄ™ bardziej zorganizowanym?", "Jaka myÅ›l dodaje mi siÅ‚y?", "Jakie sÄ… moje 3 priorytety na dziÅ›?", "Jak mogÄ™ byÄ‡ bardziej obecny/a w tej chwili?", "JakÄ… jednÄ… rzecz mogÄ™ odpuÅ›ciÄ‡?", "Co piÄ™knego dostrzegam wokÃ³Å‚ siebie w tej chwili?", "JakÄ… obietnicÄ™ skÅ‚adam sobie na ten dzieÅ„?"];
const suggestedEveningQuestions = ["Co dzisiaj poszÅ‚o lepiej, niÅ¼ siÄ™ spodziewaÅ‚em/am?", "Kiedy czuÅ‚em/am siÄ™ dzisiaj najbardziej sobÄ…?", "Co dzisiaj wywoÅ‚aÅ‚o mÃ³j uÅ›miech?", "JakÄ… jednÄ… rzecz zrobiÅ‚bym/zrobiÅ‚abym inaczej?", "Kto mi dzisiaj pomÃ³gÅ‚ lub kogo ja wsparÅ‚em/wsparÅ‚am?", "W jaki sposÃ³b ruszyÅ‚em/am do przodu w kierunku moich celÃ³w?", "Co dzisiaj mnie zaskoczyÅ‚o?", "Czego siÄ™ dzisiaj pozbyÅ‚em/pozbyÅ‚am (np. zÅ‚ego nawyku, negatywnej myÅ›li)?", "Jaka byÅ‚a najpiÄ™kniejsza rzecz, ktÃ³rÄ… dziÅ› widziaÅ‚em/widziaÅ‚am?", "O czym nowym dziÅ› myÅ›laÅ‚em/myÅ›laÅ‚am?", "Jakie uczucie dominowaÅ‚o w moim dniu?", "Co mogÄ™ zrobiÄ‡ jutro, aby byÅ‚o jeszcze lepsze?", "Kiedy czuÅ‚em/am siÄ™ najbardziej zrelaksowany/a?", "Jaka piosenka pasowaÅ‚aby do dzisiejszego dnia?", "Czego nauczyÅ‚a mnie dzisiejsza poraÅ¼ka lub wyzwanie?", "Za co chciaÅ‚bym/chciaÅ‚abym sobie podziÄ™kowaÄ‡?", "Jakie maÅ‚e zwyciÄ™stwo dzisiaj odniosÅ‚em/odniosÅ‚am?", "Jak oceniÅ‚bym/oceniÅ‚abym dziÅ› swojÄ… cierpliwoÅ›Ä‡?", "Co dobrego zjadÅ‚em/zjadÅ‚am?", "Z jakÄ… myÅ›lÄ… chcÄ™ zasnÄ…Ä‡?"];
const suggestedSummaryQuestions = ["JakÄ… jednÄ… emocjÄ™ najczÄ™Å›ciej dziÅ› odczuwaÅ‚em/am?", "Co byÅ‚o najwiÄ™kszym wyzwaniem, z ktÃ³rym siÄ™ zmierzyÅ‚em/am?", "Gdybym miaÅ‚/a opisaÄ‡ ten dzieÅ„ jednym sÅ‚owem, jakie by to byÅ‚o?", "Co dzisiaj zabraÅ‚o mi najwiÄ™cej energii?", "Co dzisiaj daÅ‚o mi najwiÄ™cej energii?", "Czy zrobiÅ‚em/am dziÅ› coÅ› tylko dla siebie?", "Jaki byÅ‚ najbardziej pamiÄ™tny moment dnia?", "Czy moje dzisiejsze dziaÅ‚ania byÅ‚y zgodne z moimi wartoÅ›ciami?", "JakÄ… jednÄ… rzecz chciaÅ‚bym/chciaÅ‚abym zapamiÄ™taÄ‡ z tego dnia?", "Czy jestem zadowolony/a z tego, jak spÄ™dziÅ‚em/am dziÅ› czas?"];
const suggestedHabits = ["Picie 2l wody", "Spacer 30 minut", "Bez social mediÃ³w rano", "Joga lub rozciÄ…ganie", "Nauka 5 nowych sÅ‚Ã³wek", "Pisanie dziennika", "Planowanie nastÄ™pnego dnia", "Zdrowy posiÅ‚ek", "Kontakt z naturÄ…", "PoÅ›wiÄ™cenie czasu na hobby", "SÅ‚uchanie podcastu rozwojowego", "Praktyka uwaÅ¼noÅ›ci (mindfulness)"];

let currentQuestions, currentHabits, currentSentimentQuestions, currentDate;

const App = {
    isAppInitialized: false,

    init() {
        window.addEventListener('load', () => {
            if (!sessionStorage.getItem('dg_user')) {
                sessionStorage.setItem('dg_user', 'default_user');
            }
            this.launch();
        });
    },

    launch() {
        if (this.isAppInitialized) return;
        this.isAppInitialized = true;

        this.loadAppData();
        
        applyTheme(AppStorage.getSetting('theme'));
        applyFont(AppStorage.getSetting('font'));
        document.documentElement.classList.toggle('dark-mode', AppStorage.getSetting('darkMode'));
        
        document.getElementById('dailyQuote').textContent = quotes[Math.floor(Math.random() * quotes.length)];
        
        this.bindMainEventListeners();
        this.rebuildAllSections();
        
        currentDate = dateFns.format(new Date(), 'yyyy-MM-dd');
        this.loadDate(currentDate);

        Settings.init();
        this.checkTimeCapsule();
    },

    loadAppData() {
        currentQuestions = AppStorage.getQuestions();
        currentHabits = AppStorage.getHabits();
        currentSentimentQuestions = AppStorage.getSentimentQuestions();
    },

    bindMainEventListeners() {
        document.getElementById('settings-btn').addEventListener('click', () => Settings.open());
        document.getElementById('backup-btn').addEventListener('click', () => openModal('backupModal'));
        document.getElementById('download-backup-btn').addEventListener('click', downloadBackup);
        document.getElementById('restore-backup-btn').addEventListener('click', restoreBackup);
        document.getElementById('prev-day-btn').addEventListener('click', () => this.changeDate(-1));
        document.getElementById('next-day-btn').addEventListener('click', () => this.changeDate(1));
        document.getElementById('currentDate').addEventListener('input', e => this.loadDate(e.target.value));
        
        document.querySelectorAll('.tab').forEach(tab => tab.addEventListener('click', e => {
            document.querySelectorAll('.tab, .section').forEach(el => el.classList.remove('active'));
            const sectionId = e.currentTarget.dataset.section;
            e.currentTarget.classList.add('active');
            document.getElementById(`${sectionId}-panel`).classList.add('active');
            if (sectionId === 'stats') Stats.render('#stats-panel');
        }));
    },

    rebuildAllSections() {
        ['poranek', 'wieczor'].forEach(s => UI.buildSection(s, s.charAt(0).toUpperCase()+s.slice(1), {'poranek':'ðŸŒ…','wieczor':'ðŸŒ™'}[s], `#${s}-panel`));
    },

    loadDate(newDate) {
        currentDate = newDate;
        document.getElementById('currentDate').value = currentDate;
        ['poranek', 'wieczor'].forEach(s => UI.loadSectionData(s, currentDate));
    },
    
    changeDate(offset) {
        const newDate = dateFns.addDays(new Date(currentDate), offset);
        this.loadDate(dateFns.format(newDate, 'yyyy-MM-dd'));
    },

    checkTimeCapsule() {
        const today = new Date(currentDate);
        const oneYearAgoDate = dateFns.format(dateFns.subYears(today, 1), 'yyyy-MM-dd');
        const sessionKey = `capsule_${oneYearAgoDate}`;
        if (sessionStorage.getItem(sessionKey)) return;

        const pastEntry = AppStorage.getDayEntry(oneYearAgoDate);
        if (Object.keys(pastEntry).length > 0) {
            let content = '';
            ['poranek', 'wieczor'].forEach(sId => {
                if(pastEntry[sId]) {
                    content += `<h4>${sId.charAt(0).toUpperCase() + sId.slice(1)}</h4><ul>`;
                    for(const key in pastEntry[sId]) {
                        const q = this.currentQuestions[sId].find(q => q.id === key);
                        if(q && pastEntry[sId][key]) {
                            content += `<li><strong>${q.text}</strong><br><em>${pastEntry[sId][key]}</em></li>`;
                        }
                    }
                    content += '</ul>';
                }
            });
            if (content) {
                document.getElementById('timeCapsuleContent').innerHTML = content;
                openModal('timeCapsuleModal');
                sessionStorage.setItem(sessionKey, 'true');
            }
        }
    }
};

class AppStorage {
    static get(key) { try { return JSON.parse(localStorage.getItem(key)); } catch (e) { return null; } }
    static set(key, value) { try { localStorage.setItem(key, JSON.stringify(value)); } catch(e) { console.error("BÅ‚Ä…d zapisu do localStorage", e); } }
    static userKey(prefix) { return `dg_${prefix}_${sessionStorage.getItem('dg_user')}`; }
    static getDayEntry(date) { return this.get(this.userKey(`entry_${date}`)) || {}; }
    static saveDayEntry(date, entry) { this.set(this.userKey(`entry_${date}`), entry); showNotification("Auto-zapisano âœ…"); }
    static getSetting(key) { const s = this.get(this.userKey('settings')); return s ? s[key] : null; }
    static setSetting(key, value) { const s = this.get(this.userKey('settings')) || {}; s[key] = value; this.set(this.userKey('settings'), s); }
    static getQuestions() { return this.get(this.userKey('questions')) || initialQuestions; }
    static saveQuestions(q) { this.set(this.userKey('questions'), q); }
    static getHabits() { return this.get(this.userKey('habits')) || initialHabits; }
    static saveHabits(h) { this.set(this.userKey('habits'), h); }
    static getSentimentQuestions() { return this.get(this.userKey('sentiments')) || initialSentimentQuestions; }
    static saveSentimentQuestions(sq) { this.set(this.userKey('sentiments'), sq); }
    static getAllDataForBackup() { const d = {}; for (let i = 0; i < localStorage.length; i++) { const k = localStorage.key(i); if (k.startsWith('dg_')) d[k] = localStorage.getItem(k); } return d; }
    static restoreDataFromBackup(d) { for (let i = localStorage.length - 1; i >= 0; i--) { if (localStorage.key(i).startsWith('dg_')) localStorage.removeItem(localStorage.key(i)); } for (const k in d) { if (k.startsWith('dg_')) localStorage.setItem(k, d[k]); } }
}

class UI {
    static buildSection(sectionId, title, emoji, containerSelector) {
        const panel = document.querySelector(containerSelector);
        if (!panel) return;
        const questions = App.currentQuestions[sectionId] || [];
        let html = `<div class="content-card"><h2 class="content-header">${emoji} ${title}</h2><div>`;
        questions.forEach(q => html += `<div class="question-group"><label for="q-${q.id}">${q.text}</label><textarea id="q-${q.id}" data-id="${q.id}"></textarea></div>`);
        if (sectionId === 'wieczor') {
            html += App.currentSentimentQuestions.map(sq => `<div class="question-group"><label>${sq.question}</label><textarea id="text-${sq.id}"></textarea><div class="sentiment-buttons"><button class="btn-sent pos" data-id="${sq.id}" data-value="pos">ðŸ˜Š</button><button class="btn-sent neg" data-id="${sq.id}" data-value="neg">ðŸ˜ž</button></div></div>`).join('');
            if (App.currentHabits.length > 0) html += `<div class="question-group"><label>Nawyki</label>${App.currentHabits.map(h => `<div class="habit-item"><label><input type="checkbox" data-habit-name="${h}"> ${h}</label></div>`).join('')}</div>`;
        }
        html += `</div></div>`;
        panel.innerHTML = html;
        panel.querySelectorAll('textarea').forEach(el => el.addEventListener('input', e => UI.saveInput(sectionId, e.target)));
        panel.querySelectorAll('input[type="checkbox"]').forEach(el => el.addEventListener('change', e => UI.saveHabitStatus(e.target)));
        panel.querySelectorAll('.btn-sent').forEach(btn => btn.addEventListener('click', e => UI.setSentiment(e.currentTarget)));
    }
    static loadSectionData(sectionId, date) {
        const entry = AppStorage.getDayEntry(date);
        const data = entry[sectionId] || {};
        document.querySelectorAll(`#${sectionId}-panel textarea`).forEach(el => {
            const id = el.id.startsWith('text-') ? el.id.replace('text-', '') : el.dataset.id;
            const key = el.id.startsWith('text-') ? `${id}Text` : id;
            if (data[key]) {
                el.value = data[key];
            } else {
                el.value = '';
            }
        });
        if (sectionId === 'wieczor') {
            const eveningData = entry.wieczor || {};
            App.currentSentimentQuestions.forEach(sq => {
                const sentiment = eveningData[sq.id + 'Sent'];
                const container = document.querySelector(`#wieczor-panel .sentiment-buttons[data-id="${sq.id}"]`);
                if (container) {
                    container.querySelectorAll('.btn-sent').forEach(btn => btn.classList.remove('active'));
                    if (sentiment) {
                        const activeBtn = container.querySelector(`.btn-sent[data-value="${sentiment}"]`);
                        if (activeBtn) activeBtn.classList.add('active');
                    }
                }
            });
            const habits = eveningData.habits || {};
            App.currentHabits.forEach(h => { const cb = document.querySelector(`#wieczor-panel [data-habit-name="${h}"]`); if(cb) cb.checked = habits[h] || false; });
        }
    }
    static saveInput(sectionId, target) {
        const entry = AppStorage.getDayEntry(App.currentDate);
        if(!entry[sectionId]) entry[sectionId] = {};
        const id = target.id.startsWith('text-') ? target.id.replace('text-', '') : target.dataset.id;
        const key = target.id.startsWith('text-') ? `${id}Text` : id;
        entry[sectionId][key] = target.value;
        AppStorage.saveDayEntry(App.currentDate, entry);
    }
    static saveHabitStatus(checkbox) { const name = checkbox.dataset.habitName, entry = AppStorage.getDayEntry(App.currentDate); if(!entry.wieczor) entry.wieczor = {}; if(!entry.wieczor.habits) entry.wieczor.habits = {}; entry.wieczor.habits[name] = checkbox.checked; AppStorage.saveDayEntry(App.currentDate, entry); }
    static setSentiment(button) {
        const value = button.dataset.value;
        const container = button.parentElement;
        const catId = button.dataset.id;
        container.querySelectorAll('.btn-sent').forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        const entry = AppStorage.getDayEntry(App.currentDate);
        if(!entry.wieczor) entry.wieczor = {};
        entry.wieczor[catId + 'Sent'] = value;
        AppStorage.saveDayEntry(App.currentDate, entry);
    }
}

class Stats {
    static chartInstances = {};
    static destroyCharts() { Object.values(this.chartInstances).forEach(chart => chart.destroy()); this.chartInstances = {}; }
    static render(containerSelector) {
        const panel = document.querySelector(containerSelector);
        if (!panel) return;
        panel.innerHTML = `<div class="content-card"><div class="stats-grid"><div class="chart-container"><canvas id="sentimentChart"></canvas></div><div class="chart-container"><canvas id="habitsChart"></canvas></div></div><div id="stats-placeholder" class="hidden">Brak wystarczajÄ…cych danych do analizy.</div></div>`;
        this.renderCharts();
    }
    static gatherData(days = 30) {
        const data = { labels: [], sentiments: { pos: [], neg: [] }, habits: {} };
        const today = new Date();
        App.currentHabits.forEach(h => data.habits[h] = 0);
        let entriesFound = 0;
        for (let i = days - 1; i >= 0; i--) {
            const date = dateFns.subDays(today, i);
            const dateKey = dateFns.format(date, 'yyyy-MM-dd');
            const entry = AppStorage.getDayEntry(dateKey);
            if (entry && entry.wieczor) {
                entriesFound++;
                data.labels.push(dateKey);
                let posCount = 0; let negCount = 0; let totalCount = 0;
                App.currentSentimentQuestions.forEach(sq => {
                    const sentiment = entry.wieczor[sq.id + 'Sent'];
                    if (sentiment) {
                        totalCount++;
                        if (sentiment === 'pos') posCount++;
                        else if (sentiment === 'neg') negCount++;
                    }
                });
                data.sentiments.pos.push(totalCount > 0 ? (posCount / totalCount) * 100 : null);
                data.sentiments.neg.push(totalCount > 0 ? (negCount / totalCount) * 100 : null);
                App.currentHabits.forEach(habit => { if (entry.wieczor.habits && entry.wieczor.habits[habit]) data.habits[habit]++; });
            }
        }
        return entriesFound > 1 ? data : null;
    }
    static renderCharts() {
        this.destroyCharts();
        const data = this.gatherData();
        const placeholder = document.getElementById('stats-placeholder');
        const grid = document.querySelector('.stats-grid');
        if (!data || data.labels.length < 2) {
            if(placeholder) placeholder.classList.remove('hidden');
            grid?.classList.add('hidden');
            return;
        }
        if(placeholder) placeholder.classList.add('hidden');
        grid?.classList.remove('hidden');
        const style = getComputedStyle(document.body);
        Chart.defaults.font.family = "inherit";
        Chart.defaults.color = style.getPropertyValue('--text-muted');
        const chartOptions = (scales) => ({ responsive: true, maintainAspectRatio: false, scales, plugins: { legend: { position: 'bottom' } }, interaction: { intersect: false, mode: 'index' }, layout: { padding: 10 } });
        
        this.chartInstances.sentiment = new Chart(document.getElementById('sentimentChart'), {
            type: 'line', data: { labels: data.labels, datasets: [
                { label: '% Ocen Pozytywnych', data: data.sentiments.pos, borderColor: 'var(--positive, #4ade80)', tension: 0.4, spanGaps: true, pointRadius: 3, pointHoverRadius: 6, borderWidth: 2, fill: true, backgroundColor: 'rgba(74, 222, 128, 0.2)' },
                { label: '% Ocen Negatywnych', data: data.sentiments.neg, borderColor: 'var(--negative, #ff5e5e)', tension: 0.4, spanGaps: true, pointRadius: 3, pointHoverRadius: 6, borderWidth: 2, fill: true, backgroundColor: 'rgba(255, 94, 94, 0.2)' }
            ]}, options: chartOptions({ x: { type: 'time', time: { unit: 'day' }, grid: { display: false } }, y: { beginAtZero: true, max: 100, ticks: {callback: (v) => `${v}%`} } }),
        });
        
        const totalHabitDays = data.labels.length;
        this.chartInstances.habits = new Chart(document.getElementById('habitsChart'), {
            type: 'bar', data: { labels: Object.keys(data.habits), datasets: [{ 
                label: '% Realizacji (ostatnie 30 dni)', 
                data: Object.values(data.habits).map(count => (count / totalHabitDays) * 100), 
                backgroundColor: style.getPropertyValue('--primary'), borderRadius: 4 
            }] },
            options: chartOptions({ y: { max: 100, ticks: {callback: (v) => `${v}%`} } })
        });
    }
}

class Settings {
    static init() {
        document.getElementById('save-settings-btn').addEventListener('click', () => this.saveAndClose());
        const settingsModal = document.getElementById('settingsModal');
        const suggestionsModal = document.getElementById('suggestionsModal');
        [settingsModal, suggestionsModal].forEach(modal => { modal.addEventListener('click', e => { if (e.target.closest('.close-modal-btn')) { closeModal(e.target.closest('.modal').id); } }); });
        settingsModal.addEventListener('click', e => {
            const header = e.target.closest('.settings-section-header');
            if (header) this.toggleSection(header);
        });
        suggestionsModal.addEventListener('click', e => {
            const addBtn = e.target.closest('.add-suggestion-btn');
            if (addBtn) {
                this.addSuggestion(addBtn.dataset.section, addBtn.dataset.index);
                addBtn.textContent = 'Dodano âœ”'; addBtn.disabled = true;
            }
        });
        settingsModal.addEventListener('input', e => {
            const { section, index, id } = e.target.dataset;
            if (section === 'summary') this.tempSentimentQuestions[index].question = e.target.value;
            else if (section === 'habits') this.tempHabits[index] = e.target.value;
            else if (this.tempQuestions[section]) {
                const question = this.tempQuestions[section].find(q => q.id === id);
                if (question) question.text = e.target.value;
            }
        });
    }
    static toggleSection(header) {
        const sectionEl = header.parentElement;
        const sectionId = header.dataset.section;
        const isOpen = sectionEl.classList.contains('is-open');
        document.querySelectorAll('#settingsModal .settings-section.is-open').forEach(openSection => {
            if (openSection !== sectionEl) { 
                openSection.classList.remove('is-open');
                openSection.querySelector('.settings-edit-btn').textContent = 'Edytuj';
            }
        });
        sectionEl.classList.toggle('is-open');
        const button = header.querySelector('.settings-edit-btn');
        if (!isOpen) { this.render(sectionId); button.textContent = 'ZwiÅ„'; } 
        else { button.textContent = 'Edytuj'; }
    }
    static open() {
        this.tempQuestions = JSON.parse(JSON.stringify(AppStorage.getQuestions()));
        this.tempHabits = [...AppStorage.getHabits()];
        this.tempSentimentQuestions = JSON.parse(JSON.stringify(AppStorage.getSentimentQuestions()));
        document.querySelectorAll('#settingsModal .settings-section').forEach(section => {
            section.classList.remove('is-open');
            section.querySelector('.settings-edit-btn').textContent = 'Edytuj';
            section.querySelector('.settings-section-content').innerHTML = '';
        });
        openModal('settingsModal');
    }
    static render(sectionId) {
        const container = document.getElementById(`s-${sectionId}-panel`);
        if (!container) return;
        let html = '';
        const renderItem = (value, section, index, placeholder, id = '') => `<div class="settings-item"><input type="text" data-section="${section}" data-index="${index}" ${id ? `data-id="${id}"` : ''} value="${String(value || '').replace(/"/g, '&quot;')}" placeholder="${placeholder}"><button class="btn action-btn" data-action="deleteItem" data-section="${section}" data-index="${index}">UsuÅ„</button></div>`;
        const renderList = (title, items, section, placeholder, textKey) => {
            let listHtml = `<h4>${title}</h4><div class="settings-list">${items.map((item, i) => renderItem(textKey ? item[textKey] : item, section, i, placeholder, textKey ? item.id : '')).join('')}</div>
            <div class="settings-action-buttons">
                <button class="btn btn-tertiary action-btn" data-action="showSuggestions" data-section="${section}">Zainspiruj mnie</button>
                <button class="btn btn-secondary action-btn" data-action="addItem" data-section="${section}">+ Dodaj</button>
            </div>`;
            return listHtml;
        };
        switch (sectionId) {
            case 'appearance':
                const theme = AppStorage.getSetting('theme') || 'las';
                const font = AppStorage.getSetting('font') || 'sans-serif';
                html = `<h4 class="settings-header-4">Wybierz motyw</h4><div class="settings-group theme-selector">${['las', 'ocean', 'fokus'].map(t => `<div class="theme-option ${theme === t ? 'is-active' : ''}" data-theme="${t}"><span>${{'las':'ðŸŒ±','ocean':'ðŸŒŠ','fokus':'âš¡'}[t]}</span> ${t.charAt(0).toUpperCase() + t.slice(1)}</div>`).join('')}</div>
                <h4 class="settings-header-4">Wybierz czcionkÄ™</h4><div class="settings-group font-selector">${['sans-serif', 'serif', 'rounded'].map(f => `<button data-font="${f}" class="btn ${font === f ? 'btn-primary' : 'btn-tertiary'}">${{'sans-serif':'Nowoczesna','serif':'Klasyczna','rounded':'Swobodna'}[f]}</button>`).join('')}</div>
                <h4 class="settings-header-4">Tryb Ciemny</h4><button id="dark-mode-btn" class="btn btn-tertiary">${document.documentElement.classList.contains('dark-mode') ? 'WyÅ‚Ä…cz' : 'WÅ‚Ä…cz'} tryb ciemny</button>`;
                break;
            case 'poranek': case 'wieczor': html = renderList(`Pytania - ${sectionId.charAt(0).toUpperCase() + sectionId.slice(1)}`, this.tempQuestions[sectionId], sectionId, 'TreÅ›Ä‡ pytania', 'text'); break;
            case 'summary': html = renderList('Pytania PodsumowujÄ…ce', this.tempSentimentQuestions, 'summary', 'TreÅ›Ä‡ pytania', 'question'); break;
            case 'habits': html = renderList('Twoje Nawyki', this.tempHabits, 'habits', 'Nazwa nawyku'); break;
        }
        container.innerHTML = html;
        container.querySelectorAll('.action-btn').forEach(btn => btn.addEventListener('click', e => { const { action, section, index } = e.currentTarget.dataset; if (this[action]) this[action](section, index); }));
        container.querySelectorAll('.theme-option').forEach(opt => opt.addEventListener('click', e => this.handleThemeChange(e.currentTarget)));
        container.querySelectorAll('.font-selector button').forEach(btn => btn.addEventListener('click', e => this.handleFontChange(e.currentTarget)));
        const darkModeBtn = container.querySelector('#dark-mode-btn');
        if (darkModeBtn) darkModeBtn.addEventListener('click', toggleDarkMode);
    }
    static handleThemeChange(option) { applyTheme(option.dataset.theme); this.render('appearance'); }
    static handleFontChange(btn) { applyFont(btn.dataset.font); this.render('appearance'); }
    static showSuggestions(section) {
        let suggestions = [], title = "Sugerowane Pytania";
        switch(section) {
            case 'poranek': suggestions = suggestedMorningQuestions; title = "Sugestie - Poranek"; break;
            case 'wieczor': suggestions = suggestedEveningQuestions; title = "Sugestie - WieczÃ³r"; break;
            case 'summary': suggestions = suggestedSummaryQuestions; title = "Sugerowane Pytania PodsumowujÄ…ce"; break;
            case 'habits': suggestions = suggestedHabits; title = "Sugerowane Nawyki"; break;
        }
        const suggestionsList = document.getElementById('suggestionsList');
        if (!suggestionsList) return;
        suggestionsList.innerHTML = suggestions.map((q, index) => `<div class="suggestion-item"><span>${q}</span><button class="btn btn-secondary add-suggestion-btn" data-section="${section}" data-index="${index}">Dodaj</button></div>`).join('');
        document.getElementById('suggestionsTitle').textContent = title;
        openModal('suggestionsModal');
    }
    static addSuggestion(section, index) {
        let textToAdd;
        switch(section) {
            case 'poranek': textToAdd = suggestedMorningQuestions[index]; this.tempQuestions.poranek.push({id: `m${Date.now()}`, text: textToAdd}); break;
            case 'wieczor': textToAdd = suggestedEveningQuestions[index]; this.tempQuestions.wieczor.push({id: `e${Date.now()}`, text: textToAdd}); break;
            case 'summary': textToAdd = suggestedSummaryQuestions[index]; this.tempSentimentQuestions.push({id: `s${Date.now()}`, question: textToAdd}); break;
            case 'habits': textToAdd = suggestedHabits[index]; this.tempHabits.push(textToAdd); break;
        }
        this.render(section);
    }
    static addItem(section) {
        if(section === 'habits') this.tempHabits.push('');
        else if (section === 'summary') this.tempSentimentQuestions.push({id: `s${Date.now()}`, question: ''});
        else { this.tempQuestions[section].push({id: `${section.charAt(0)}${Date.now()}`, text: ''}); }
        this.render(section);
    }
    static deleteItem(section, index) {
        if(section === 'habits') this.tempHabits.splice(index, 1);
        else if (section === 'summary') this.tempSentimentQuestions.splice(index, 1);
        else { this.tempQuestions[section].splice(index, 1); }
        this.render(section);
    }
    static saveAndClose() {
        Object.keys(this.tempQuestions).forEach(s => this.tempQuestions[s] = this.tempQuestions[s].filter(q => q.text.trim()));
        this.tempHabits = this.tempHabits.filter(h => h.trim());
        this.tempSentimentQuestions = this.tempSentimentQuestions.filter(q => q.question.trim());
        AppStorage.saveQuestions(this.tempQuestions);
        AppStorage.saveHabits(this.tempHabits);
        AppStorage.saveSentimentQuestions(this.tempSentimentQuestions);
        App.loadAppData();
        App.rebuildAllSections();
        App.loadDate(currentDate);
        closeModal('settingsModal');
        showNotification("Ustawienia zapisane! âœ…");
    }
}

function applyTheme(themeName = 'las') { document.documentElement.dataset.theme = themeName; AppStorage.setSetting('theme', themeName); const meta = document.querySelector('meta[name="theme-color"]'); if(meta) meta.content = getComputedStyle(document.documentElement).getPropertyValue('--card').trim(); }
function applyFont(fontName = 'sans-serif') {
    document.body.classList.remove('font-serif', 'font-rounded');
    if (fontName === 'serif') document.body.classList.add('font-serif');
    else if (fontName === 'rounded') document.body.classList.add('font-rounded');
    AppStorage.setSetting('font', fontName);
}
function toggleDarkMode() {
    const isDark = document.documentElement.classList.toggle('dark-mode');
    AppStorage.setSetting('darkMode', isDark);
    applyTheme(AppStorage.getSetting('theme'));
    const btn = document.getElementById('dark-mode-btn');
    if (btn) btn.textContent = `${isDark ? 'WyÅ‚Ä…cz' : 'WÅ‚Ä…cz'} tryb ciemny`;
}
function showNotification(msg, withReloadButton = false) {
    const el = document.getElementById('notification');
    if (el) {
        el.innerHTML = msg;
        if (withReloadButton) {
            const reloadBtn = document.createElement('button');
            reloadBtn.textContent = 'OdÅ›wieÅ¼';
            reloadBtn.className = 'btn btn-primary';
            reloadBtn.style.marginLeft = '15px';
            reloadBtn.onclick = () => window.location.reload();
            el.appendChild(reloadBtn);
        }
        el.classList.add('active');
        if (!withReloadButton) {
            setTimeout(() => el.classList.remove('active'), 2800);
        }
    }
}
function openModal(id) { document.getElementById(id)?.classList.add('active'); }
function closeModal(id) { document.getElementById(id)?.classList.remove('active'); }
function downloadBackup() { 
    const data = AppStorage.getAllDataForBackup();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `daily_growth_backup_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    showNotification("Backup pobrany âœ…");
    closeModal('backupModal');
}
function restoreBackup() { 
    const fileInput = document.getElementById('restoreFile');
    const file = fileInput.files[0];
    if (!file) { showNotification("Wybierz plik!"); return; }
    const reader = new FileReader();
    reader.onload = (e) => {
        try {
            const data = JSON.parse(e.target.result);
            AppStorage.restoreDataFromBackup(data);
            showNotification("Dane przywrÃ³cone! Aplikacja zostanie odÅ›wieÅ¼ona.");
            closeModal('backupModal');
            setTimeout(() => window.location.reload(), 2000);
        } catch (err) {
            showNotification("BÅ‚Ä…d: Plik backupu jest uszkodzony.");
        } finally {
            fileInput.value = '';
        }
    };
    reader.readAsText(file);
}

App.init();